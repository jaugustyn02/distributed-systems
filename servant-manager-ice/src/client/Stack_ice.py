# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Stack.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Objects
_M_Objects = Ice.openModule('Objects')
__name__ = 'Objects'

if '_t_IntSequence' not in _M_Objects.__dict__:
    _M_Objects._t_IntSequence = IcePy.defineSequence('::Objects::IntSequence', (), IcePy._t_int)

_M_Objects._t_Stack = IcePy.defineValue('::Objects::Stack', Ice.Value, -1, (), False, True, None, ())

if 'StackPrx' not in _M_Objects.__dict__:
    _M_Objects.StackPrx = Ice.createTempClass()
    class StackPrx(Ice.ObjectPrx):

        def push(self, value, context=None):
            return _M_Objects.Stack._op_push.invoke(self, ((value, ), context))

        def pushAsync(self, value, context=None):
            return _M_Objects.Stack._op_push.invokeAsync(self, ((value, ), context))

        def begin_push(self, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Stack._op_push.begin(self, ((value, ), _response, _ex, _sent, context))

        def end_push(self, _r):
            return _M_Objects.Stack._op_push.end(self, _r)

        def pop(self, context=None):
            return _M_Objects.Stack._op_pop.invoke(self, ((), context))

        def popAsync(self, context=None):
            return _M_Objects.Stack._op_pop.invokeAsync(self, ((), context))

        def begin_pop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Stack._op_pop.begin(self, ((), _response, _ex, _sent, context))

        def end_pop(self, _r):
            return _M_Objects.Stack._op_pop.end(self, _r)

        def top(self, context=None):
            return _M_Objects.Stack._op_top.invoke(self, ((), context))

        def topAsync(self, context=None):
            return _M_Objects.Stack._op_top.invokeAsync(self, ((), context))

        def begin_top(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Stack._op_top.begin(self, ((), _response, _ex, _sent, context))

        def end_top(self, _r):
            return _M_Objects.Stack._op_top.end(self, _r)

        def topN(self, n, context=None):
            return _M_Objects.Stack._op_topN.invoke(self, ((n, ), context))

        def topNAsync(self, n, context=None):
            return _M_Objects.Stack._op_topN.invokeAsync(self, ((n, ), context))

        def begin_topN(self, n, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Stack._op_topN.begin(self, ((n, ), _response, _ex, _sent, context))

        def end_topN(self, _r):
            return _M_Objects.Stack._op_topN.end(self, _r)

        def isEmpty(self, context=None):
            return _M_Objects.Stack._op_isEmpty.invoke(self, ((), context))

        def isEmptyAsync(self, context=None):
            return _M_Objects.Stack._op_isEmpty.invokeAsync(self, ((), context))

        def begin_isEmpty(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Stack._op_isEmpty.begin(self, ((), _response, _ex, _sent, context))

        def end_isEmpty(self, _r):
            return _M_Objects.Stack._op_isEmpty.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Objects.StackPrx.ice_checkedCast(proxy, '::Objects::Stack', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Objects.StackPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Objects::Stack'
    _M_Objects._t_StackPrx = IcePy.defineProxy('::Objects::Stack', StackPrx)

    _M_Objects.StackPrx = StackPrx
    del StackPrx

    _M_Objects.Stack = Ice.createTempClass()
    class Stack(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Objects::Stack')

        def ice_id(self, current=None):
            return '::Objects::Stack'

        @staticmethod
        def ice_staticId():
            return '::Objects::Stack'

        def push(self, value, current=None):
            raise NotImplementedError("servant method 'push' not implemented")

        def pop(self, current=None):
            raise NotImplementedError("servant method 'pop' not implemented")

        def top(self, current=None):
            raise NotImplementedError("servant method 'top' not implemented")

        def topN(self, n, current=None):
            raise NotImplementedError("servant method 'topN' not implemented")

        def isEmpty(self, current=None):
            raise NotImplementedError("servant method 'isEmpty' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Objects._t_StackDisp)

        __repr__ = __str__

    _M_Objects._t_StackDisp = IcePy.defineClass('::Objects::Stack', Stack, (), None, ())
    Stack._ice_type = _M_Objects._t_StackDisp

    Stack._op_push = IcePy.Operation('push', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Stack._op_pop = IcePy.Operation('pop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Stack._op_top = IcePy.Operation('top', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Stack._op_topN = IcePy.Operation('topN', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Objects._t_IntSequence, False, 0), ())
    Stack._op_isEmpty = IcePy.Operation('isEmpty', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_Objects.Stack = Stack
    del Stack

# End of module Objects
