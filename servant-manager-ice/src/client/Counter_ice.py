# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Counter.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Objects
_M_Objects = Ice.openModule('Objects')
__name__ = 'Objects'

_M_Objects._t_Counter = IcePy.defineValue('::Objects::Counter', Ice.Value, -1, (), False, True, None, ())

if 'CounterPrx' not in _M_Objects.__dict__:
    _M_Objects.CounterPrx = Ice.createTempClass()
    class CounterPrx(Ice.ObjectPrx):

        def increment(self, context=None):
            return _M_Objects.Counter._op_increment.invoke(self, ((), context))

        def incrementAsync(self, context=None):
            return _M_Objects.Counter._op_increment.invokeAsync(self, ((), context))

        def begin_increment(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Counter._op_increment.begin(self, ((), _response, _ex, _sent, context))

        def end_increment(self, _r):
            return _M_Objects.Counter._op_increment.end(self, _r)

        def getValue(self, context=None):
            return _M_Objects.Counter._op_getValue.invoke(self, ((), context))

        def getValueAsync(self, context=None):
            return _M_Objects.Counter._op_getValue.invokeAsync(self, ((), context))

        def begin_getValue(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Objects.Counter._op_getValue.begin(self, ((), _response, _ex, _sent, context))

        def end_getValue(self, _r):
            return _M_Objects.Counter._op_getValue.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Objects.CounterPrx.ice_checkedCast(proxy, '::Objects::Counter', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Objects.CounterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Objects::Counter'
    _M_Objects._t_CounterPrx = IcePy.defineProxy('::Objects::Counter', CounterPrx)

    _M_Objects.CounterPrx = CounterPrx
    del CounterPrx

    _M_Objects.Counter = Ice.createTempClass()
    class Counter(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Objects::Counter')

        def ice_id(self, current=None):
            return '::Objects::Counter'

        @staticmethod
        def ice_staticId():
            return '::Objects::Counter'

        def increment(self, current=None):
            raise NotImplementedError("servant method 'increment' not implemented")

        def getValue(self, current=None):
            raise NotImplementedError("servant method 'getValue' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Objects._t_CounterDisp)

        __repr__ = __str__

    _M_Objects._t_CounterDisp = IcePy.defineClass('::Objects::Counter', Counter, (), None, ())
    Counter._ice_type = _M_Objects._t_CounterDisp

    Counter._op_increment = IcePy.Operation('increment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Counter._op_getValue = IcePy.Operation('getValue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())

    _M_Objects.Counter = Counter
    del Counter

# End of module Objects
